group 'com.thirdparty'

apply plugin: 'java'
apply plugin: 'idea'

ext {
    versionRegex = '(\\d+)(\\.\\d+)*'
    jacksonVersion = "2.8.4"

    scanDir = "$buildDir/scan"
    fixedZipFileName = 'fixed_sample_scan.zip'
}

// plugin version, note the version must match versionRegex.
version = '1.0'

if (!project.hasProperty('release')) {
    // Gradle has been run without option -Prelease - auto increment plugin version
    def time = System.currentTimeMillis().intdiv(1000)
    def hours = time.intdiv(3600)
    version = String.format('%s.%d', version, hours)
}

repositories {
    mavenCentral()
}

configurations {
    implementationExport
    implementation.extendsFrom (implementationExport)
}

dependencies {
    // dependencies provided by plugin runtime
    implementation 'com.fortify.plugin:plugin-api:1.0.1.1'
    implementation 'org.slf4j:slf4j-api:1.7.21'

    // plugin specific dependencies
    implementationExport(group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: "$jacksonVersion") { transitive = false }
    implementationExport(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "$jacksonVersion") { transitive = false }
    implementationExport(group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "$jacksonVersion") { transitive = false }
}

jar {
    doFirst {
        // check if version matches requirements
        if (!project.version.matches(versionRegex)) {
            throw new InvalidUserDataException("Plugin version '$version' does not match '$versionRegex'")
        }
    }
    // replace version placeholders in plugin.xml
    filesMatching('plugin.xml') {
        filter {
            it.replaceAll('<!--VERSION-->.*?<!--/VERSION-->', project.version)
        }
    }
    // include files from implementationExport dependencies
    from { configurations.implementationExport.collect { it.isDirectory() ? it : zipTree(it).matching { exclude 'META-INF/*' } } }
}

task deleteFixedScan {
    doLast {
        delete "$scanDir/$fixedZipFileName"
    }
}

task createScanDir {
    doFirst {
        mkdir "$scanDir"
    }
}

task (genFixedScan, dependsOn: [classes, createScanDir, deleteFixedScan], type: JavaExec) {
    main = 'com.thirdparty.ScanGenerator'
    classpath = sourceSets.main.runtimeClasspath
    args 'fixed', "$scanDir/$fixedZipFileName"
}

build.dependsOn genFixedScan

